/**
 * @file index.ts
 * @description √çndice del m√≥dulo de autenticaci√≥n de Ecommunitas
 * @module Features/Auth
 * @version 1.0.0
 * @author Equipo de Desarrollo Ecommunitas
 * @created 2024
 * 
 * Este archivo centraliza todas las exportaciones relacionadas con la funcionalidad
 * de autenticaci√≥n y autorizaci√≥n de la aplicaci√≥n. Proporciona un punto √∫nico
 * de acceso a todos los componentes, servicios, stores y utilidades del sistema
 * de autenticaci√≥n.
 * 
 * ARQUITECTURA DEL M√ìDULO:
 * ========================
 * 
 * üè™ STORES (Estado Global):
 * - useAuthStore: Store principal de Pinia para gesti√≥n de estado de autenticaci√≥n
 * - Manejo de usuario actual, tokens, estado de sesi√≥n
 * - Persistencia autom√°tica en localStorage
 * - Reactividad completa con Vue 3
 * 
 * üîß SERVICIOS (API):
 * - authService: Cliente HTTP para operaciones de autenticaci√≥n
 * - Login, registro, logout, refresh de tokens
 * - Gesti√≥n de perfiles y configuraci√≥n de usuario
 * - Interceptores autom√°ticos para manejo de tokens
 * 
 * üéØ COMPOSABLES (L√≥gica Reutilizable):
 * - useAuth: Hook principal para funcionalidades de autenticaci√≥n
 * - M√©todos reactivos para login, logout, verificaci√≥n de permisos
 * - Integraci√≥n autom√°tica con router y guards de navegaci√≥n
 * - Manejo de errores y notificaciones
 * 
 * üß© COMPONENTES (UI):
 * - Formularios de login y registro
 * - Componentes de perfil de usuario
 * - Indicadores de estado de autenticaci√≥n
 * - Modales y di√°logos relacionados con auth
 * 
 * üìÑ VISTAS (P√°ginas):
 * - P√°ginas de login y registro
 * - Perfil de usuario y configuraci√≥n
 * - Recuperaci√≥n de contrase√±a
 * - Verificaci√≥n de email
 * 
 * üõ†Ô∏è UTILIDADES (Helpers):
 * - Validadores de email, contrase√±a y nombres
 * - Helpers para manejo de tokens y headers
 * - Funciones de verificaci√≥n de permisos y roles
 * - Formateo y manipulaci√≥n de datos de usuario
 * - Gesti√≥n de almacenamiento local
 * 
 * FUNCIONALIDADES PRINCIPALES:
 * ============================
 * 
 * üîê AUTENTICACI√ìN:
 * - Login con email/contrase√±a
 * - Registro de nuevos usuarios
 * - Logout seguro con limpieza de datos
 * - Refresh autom√°tico de tokens
 * - Recordar sesi√≥n ("Remember me")
 * 
 * üë§ GESTI√ìN DE PERFILES:
 * - Visualizaci√≥n y edici√≥n de perfil
 * - Cambio de contrase√±a
 * - Actualizaci√≥n de informaci√≥n personal
 * - Gesti√≥n de avatar/foto de perfil
 * 
 * üõ°Ô∏è AUTORIZACI√ìN:
 * - Sistema de roles (admin, moderator, user)
 * - Verificaci√≥n de permisos granular
 * - Guards de navegaci√≥n autom√°ticos
 * - Protecci√≥n de rutas y componentes
 * 
 * üîÑ RECUPERACI√ìN DE CUENTA:
 * - Solicitud de reset de contrase√±a
 * - Verificaci√≥n por email
 * - Cambio seguro de contrase√±a
 * 
 * VENTAJAS DE LA ARQUITECTURA:
 * ============================
 * 
 * ‚úÖ **Importaciones Limpias**: 
 *    `import { useAuth, authService } from '@/features/auth'`
 * 
 * ‚úÖ **Separaci√≥n de Responsabilidades**: 
 *    Cada capa tiene una funci√≥n espec√≠fica y bien definida
 * 
 * ‚úÖ **Reutilizaci√≥n**: 
 *    Composables y utilidades reutilizables en toda la app
 * 
 * ‚úÖ **Mantenibilidad**: 
 *    C√≥digo organizado y f√°cil de mantener
 * 
 * ‚úÖ **Escalabilidad**: 
 *    F√°cil agregar nuevas funcionalidades de auth
 * 
 * ‚úÖ **Testing**: 
 *    Cada parte puede ser testeada independientemente
 * 
 * @example
 * ```typescript
 * // Uso b√°sico del m√≥dulo de autenticaci√≥n
 * import { 
 *   useAuth, 
 *   authService, 
 *   useAuthStore,
 *   isAuthenticated,
 *   hasRole 
 * } from '@/features/auth'
 * 
 * // En un componente Vue
 * const { login, logout, user, isLoading } = useAuth()
 * 
 * // Verificar autenticaci√≥n
 * if (isAuthenticated()) {
 *   console.log('Usuario autenticado')
 * }
 * 
 * // Verificar roles
 * if (hasRole('admin')) {
 *   console.log('Usuario es administrador')
 * }
 * 
 * // Usar el store directamente
 * const authStore = useAuthStore()
 * console.log(authStore.user)
 * ```
 */

// Stores
export { useAuthStore } from './stores/authStore'

// Services
export { default as authService } from './services/authService'
export * from './services/authService'

// Composables
export {
  useAuth
} from './composables/useAuth'

// Components
export * from './components'

// Views
export * from './views'

// Utils
export {
  getAuthHeader,
  getAuthHeaders,
  getAuthHeadersFormData,
  isAuthenticated,
  getCurrentUser,
  getCurrentUserId,
  getCurrentUserRole,
  hasRole,
  hasAnyRole,
  isAdmin,
  isModerator,
  isOwner,
  canAccess,
  isValidEmail,
  validatePassword,
  validateName,
  clearAuthData,
  saveAuthData,
  getTokenExpiration,
  isTokenExpired,
  isCurrentTokenExpired,
  formatUserDisplayName,
  getUserInitials,
  generateSecurePassword,
  debounceAuthCheck
} from './utils/authUtils'

// Re-export types for convenience
export type {
  User,
  LoginCredentials,
  RegisterCredentials,
  AuthResponse,
  UpdateProfileData,
  PasswordUpdateData,
  ForgotPasswordData,
  ResetPasswordData
} from './services/authService'

// Legacy exports for backward compatibility
export { default as authHeader } from './utils/authUtils'