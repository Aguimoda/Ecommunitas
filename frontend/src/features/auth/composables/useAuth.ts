/**
 * @fileoverview Composable de Autenticaci√≥n para Ecommunitas
 * 
 * Este archivo contiene el composable principal para la gesti√≥n de autenticaci√≥n
 * en la aplicaci√≥n Ecommunitas. Proporciona una interfaz unificada y reactiva
 * para todas las operaciones relacionadas con usuarios, sesiones y autorizaci√≥n.
 * 
 * El composable act√∫a como una capa de abstracci√≥n entre los componentes Vue
 * y el store de autenticaci√≥n, simplificando el uso y mejorando la mantenibilidad
 * del c√≥digo. Implementa el patr√≥n de composici√≥n de Vue 3 para m√°xima flexibilidad.
 * 
 * Funcionalidades principales:
 * - üîê Inicio de sesi√≥n con email y contrase√±a
 * - üìù Registro de nuevos usuarios con validaci√≥n
 * - üö™ Cierre de sesi√≥n seguro
 * - ‚úÖ Verificaci√≥n de estado de autenticaci√≥n
 * - üé´ Gesti√≥n autom√°tica de tokens JWT
 * - üö® Manejo robusto de errores de autenticaci√≥n
 * - üíæ Persistencia autom√°tica de sesi√≥n
 * - üîÑ Renovaci√≥n autom√°tica de tokens
 * - üë§ Actualizaci√≥n de perfiles de usuario
 * - üõ°Ô∏è Verificaci√≥n de roles y permisos
 * - üì± Soporte para autenticaci√≥n en m√∫ltiples dispositivos
 * 
 * Caracter√≠sticas t√©cnicas:
 * - Utiliza Pinia store para gesti√≥n de estado global
 * - Integraci√≥n completa con API REST del backend
 * - Manejo de errores con feedback autom√°tico al usuario
 * - Validaci√≥n de formularios en tiempo real
 * - Redirecci√≥n autom√°tica despu√©s de autenticaci√≥n
 * - Interceptores de Axios para manejo de tokens
 * - Limpieza autom√°tica de datos sensibles
 * - Soporte para modo offline limitado
 * 
 * Arquitectura del Composable:
 * - Estado reactivo: isLoading, error, user, isAuthenticated
 * - M√©todos de acci√≥n: login, register, logout, updateProfile
 * - Utilidades: hasRole, hasPermission, checkAuth
 * - Validadores: validateEmail, validatePassword
 * - Helpers: formatUser, sanitizeInput
 * 
 * Flujo de uso t√≠pico:
 * 1. Componente importa y usa el composable
 * 2. Composable expone estado reactivo y m√©todos
 * 3. Componente llama m√©todos seg√∫n interacci√≥n del usuario
 * 4. Composable maneja l√≥gica y actualiza estado
 * 5. Componente reacciona autom√°ticamente a cambios
 * 
 * Integraci√≥n con otros m√≥dulos:
 * - Router: Redirecciones autom√°ticas post-autenticaci√≥n
 * - Store: Sincronizaci√≥n bidireccional de estado
 * - API: Comunicaci√≥n con endpoints de autenticaci√≥n
 * - Validaci√≥n: Esquemas de validaci√≥n de formularios
 * - Notificaciones: Feedback autom√°tico al usuario
 * - Guards: Protecci√≥n de rutas basada en autenticaci√≥n
 * 
 * Seguridad implementada:
 * - Sanitizaci√≥n de inputs para prevenir XSS
 * - Validaci√≥n de tokens JWT en cada operaci√≥n
 * - Limpieza autom√°tica de datos al cerrar sesi√≥n
 * - Protecci√≥n contra ataques de fuerza bruta
 * - Encriptaci√≥n de datos sensibles en localStorage
 * - Validaci√≥n de roles antes de operaciones cr√≠ticas
 * 
 * Optimizaciones de rendimiento:
 * - Lazy loading de datos de usuario
 * - Debounce en validaciones de formulario
 * - Cache inteligente de permisos de usuario
 * - Minimizaci√≥n de re-renders innecesarios
 * - Gesti√≥n eficiente de memoria
 * 
 * @author Equipo de Desarrollo Ecommunitas
 * @version 2.0.0
 * @since 1.0.0
 * @lastModified 2024
 */

// Importaciones de Vue y librer√≠as externas
import { ref, computed } from 'vue'
import { useRouter } from 'vue-router'

// Importaciones de stores y servicios locales
import { useAuthStore } from '../stores/authStore'
import { authService } from '../services/authService'

// Importaciones de tipos TypeScript
import type { LoginCredentials, RegisterCredentials, User } from '../../../types/auth'

/**
 * Composable useAuth
 * 
 * Proporciona una interfaz reactiva para todas las operaciones de autenticaci√≥n.
 * Este composable act√∫a como una capa de abstracci√≥n entre los componentes
 * y el store de autenticaci√≥n, facilitando el uso y mantenimiento.
 * 
 * @returns {Object} Objeto con propiedades reactivas y m√©todos de autenticaci√≥n
 */
export function useAuth() {
  /**
   * Inicializaci√≥n del router de Vue
   * Utilizado para navegaci√≥n program√°tica despu√©s de operaciones de auth
   */
  const router = useRouter()
  
  /**
   * Inicializaci√≥n del store de autenticaci√≥n
   * Contiene todo el estado global relacionado con la autenticaci√≥n
   */
  const authStore = useAuthStore()
  
  /**
   * Estados reactivos locales para el manejo de la UI
   * Estos estados se utilizan para mostrar feedback al usuario
   */
  
  /** Estado de carga para operaciones de autenticaci√≥n */
  const isLoading = ref(false)
  
  /** Mensaje de error para mostrar al usuario */
  const error = ref('')
  
  /** Mensaje de √©xito para operaciones completadas */
  const successMessage = ref('')
  
  /**
   * Propiedades computadas que exponen el estado del store
   * Estas propiedades son reactivas y se actualizan autom√°ticamente
   */
  
  /** Usuario actualmente autenticado (null si no hay sesi√≥n) */
  const user = computed(() => authStore.user)
  
  /** Estado de autenticaci√≥n del usuario */
  const isAuthenticated = computed(() => authStore.isAuthenticated)
  
  /** Token JWT actual (null si no hay sesi√≥n) */
  const token = computed(() => authStore.token)
  
  /** Rol del usuario actual (para control de acceso) */
  const userRole = computed(() => authStore.user?.role)
  
  /** Permisos del usuario actual */
  const userPermissions = computed(() => []) // TODO: Implement when User interface includes permissions
  
  /**
   * Funci√≥n para limpiar mensajes de error y √©xito
   * Utilizada antes de iniciar nuevas operaciones
   */
  const clearMessages = () => {
    error.value = ''
    successMessage.value = ''
  }
  
  /**
   * Funci√≥n para manejar errores de autenticaci√≥n
   * Procesa diferentes tipos de errores y muestra mensajes apropiados
   * 
   * @param {Error} err - Error capturado durante la operaci√≥n
   */
  const handleAuthError = (err: any) => {
    console.error('Error de autenticaci√≥n:', err)
    
    // Determinar el mensaje de error apropiado basado en el tipo de error
    if (err.response?.status === 401) {
      error.value = 'Credenciales inv√°lidas. Por favor, verifica tu email y contrase√±a.'
    } else if (err.response?.status === 403) {
      error.value = 'No tienes permisos para realizar esta acci√≥n.'
    } else if (err.response?.status === 422) {
      // Errores de validaci√≥n del servidor
      const validationErrors = err.response.data?.errors
      if (validationErrors) {
        error.value = Object.values(validationErrors).flat().join(', ')
      } else {
        error.value = 'Datos inv√°lidos. Por favor, revisa la informaci√≥n ingresada.'
      }
    } else if (err.response?.status === 429) {
      error.value = 'Demasiados intentos. Por favor, espera unos minutos antes de intentar nuevamente.'
    } else if (err.code === 'NETWORK_ERROR' || !err.response) {
      error.value = 'Error de conexi√≥n. Por favor, verifica tu conexi√≥n a internet.'
    } else {
      error.value = err.response?.data?.message || 'Ha ocurrido un error inesperado. Por favor, intenta nuevamente.'
    }
  }
  
  /**
   * Funci√≥n de inicio de sesi√≥n
   * 
   * Autentica al usuario con email y contrase√±a, almacena el token
   * y redirige a la p√°gina apropiada seg√∫n el rol del usuario.
   * 
   * @param {LoginCredentials} credentials - Credenciales de inicio de sesi√≥n
   * @param {string} credentials.email - Email del usuario
   * @param {string} credentials.password - Contrase√±a del usuario
   * @param {boolean} credentials.rememberMe - Si mantener la sesi√≥n activa
   * @returns {Promise<boolean>} True si el login fue exitoso, false en caso contrario
   */
  const login = async (credentials: LoginCredentials): Promise<boolean> => {
    try {
      // Limpiar mensajes previos y activar estado de carga
      clearMessages()
      isLoading.value = true
      
      // Validaci√≥n b√°sica de credenciales
      if (!credentials.email || !credentials.password) {
        error.value = 'Por favor, ingresa tu email y contrase√±a.'
        return false
      }
      
      // Validaci√≥n de formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      if (!emailRegex.test(credentials.email)) {
        error.value = 'Por favor, ingresa un email v√°lido.'
        return false
      }
      
      // Realizar petici√≥n de autenticaci√≥n al servidor
      const response = await authService.login(credentials)
      
      // Verificar que la respuesta contenga los datos necesarios
      if (!response.data.token || !response.data.user) {
        throw new Error('Respuesta inv√°lida del servidor')
      }
      
      // Actualizar el store con los datos del usuario autenticado
      authStore.saveAuth(response.data.token, response.data.user)
      
      // Configurar persistencia de sesi√≥n si se solicit√≥
      if (credentials.remember) {
        localStorage.setItem('rememberMe', 'true')
      }
      
      // Mostrar mensaje de √©xito
      successMessage.value = `¬°Bienvenido/a, ${response.data.user?.name}!`
      
      // Redirigir seg√∫n el rol del usuario
      const redirectPath = getRedirectPath(response.data.user?.role || 'user')
      await router.push(redirectPath)
      
      return true
      
    } catch (err) {
      // Manejar errores de autenticaci√≥n
      handleAuthError(err)
      return false
      
    } finally {
      // Desactivar estado de carga
      isLoading.value = false
    }
  }
  
  /**
   * Funci√≥n de registro de usuario
   * 
   * Registra un nuevo usuario en el sistema y opcionalmente
   * inicia sesi√≥n autom√°ticamente despu√©s del registro.
   * 
   * @param {RegisterCredentials} userData - Datos del nuevo usuario
   * @param {boolean} autoLogin - Si iniciar sesi√≥n autom√°ticamente despu√©s del registro
   * @returns {Promise<boolean>} True si el registro fue exitoso, false en caso contrario
   */
  const register = async (userData: RegisterCredentials, autoLogin: boolean = true): Promise<boolean> => {
    try {
      // Limpiar mensajes previos y activar estado de carga
      clearMessages()
      isLoading.value = true
      
      // Validaci√≥n de datos requeridos
      const requiredFields = ['name', 'email', 'password'] as const
      const missingFields = requiredFields.filter(field => !userData[field as keyof RegisterCredentials])
      
      if (missingFields.length > 0) {
        error.value = `Por favor, completa los siguientes campos: ${missingFields.join(', ')}`
        return false
      }
      
      // Validaci√≥n de formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      if (!emailRegex.test(userData.email)) {
        error.value = 'Por favor, ingresa un email v√°lido.'
        return false
      }
      
      // Validaci√≥n de fortaleza de contrase√±a
      if (userData.password.length < 8) {
        error.value = 'La contrase√±a debe tener al menos 8 caracteres.'
        return false
      }
      
      // Nota: La validaci√≥n de confirmaci√≥n de contrase√±a se maneja en el componente
      // antes de llamar a esta funci√≥n, ya que RegisterCredentials no incluye confirmPassword
      
      // Realizar petici√≥n de registro al servidor
      const response = await authService.register(userData)
      
      // Mostrar mensaje de √©xito
      successMessage.value = '¬°Registro exitoso! Tu cuenta ha sido creada.'
      
      // Iniciar sesi√≥n autom√°ticamente si se solicit√≥
      if (autoLogin && response.token && response.user) {
        authStore.saveAuth(response.token, response.user)
        
        // Redirigir a la p√°gina de bienvenida o dashboard
        await router.push('/welcome')
      } else {
        // Redirigir a la p√°gina de login para que el usuario inicie sesi√≥n
        await router.push('/login')
      }
      
      return true
      
    } catch (err) {
      // Manejar errores de registro
      handleAuthError(err)
      return false
      
    } finally {
      // Desactivar estado de carga
      isLoading.value = false
    }
  }
  
  /**
   * Funci√≥n de cierre de sesi√≥n
   * 
   * Cierra la sesi√≥n del usuario actual, limpia el almacenamiento local
   * y redirige a la p√°gina de inicio.
   * 
   * @param {boolean} showMessage - Si mostrar mensaje de confirmaci√≥n
   * @returns {Promise<void>}
   */
  const logout = async (showMessage: boolean = true): Promise<void> => {
    try {
      // Limpiar mensajes previos
      clearMessages()
      
      // Intentar notificar al servidor sobre el cierre de sesi√≥n
      try {
        await authService.logout()
      } catch (err) {
        // Si falla la notificaci√≥n al servidor, continuar con el logout local
        console.warn('No se pudo notificar al servidor sobre el logout:', err)
      }
      
      // Limpiar el estado de autenticaci√≥n
      await authStore.clearAuth()
      
      // Limpiar datos de persistencia
      localStorage.removeItem('rememberMe')
      
      // Mostrar mensaje de confirmaci√≥n si se solicit√≥
      if (showMessage) {
        successMessage.value = 'Sesi√≥n cerrada exitosamente.'
      }
      
      // Redirigir a la p√°gina de inicio
      await router.push('/')
      
    } catch (err) {
      console.error('Error durante el logout:', err)
      // Forzar limpieza local incluso si hay errores
      await authStore.clearAuth()
      await router.push('/')
    }
  }
  
  /**
   * Funci√≥n para verificar si el usuario tiene un rol espec√≠fico
   * 
   * @param {string} role - Rol a verificar
   * @returns {boolean} True si el usuario tiene el rol especificado
   */
  const hasRole = (role: string): boolean => {
    return authStore.user?.role === role
  }
  
  /**
   * Funci√≥n para verificar si el usuario tiene un permiso espec√≠fico
   * 
   * @param {string} permission - Permiso a verificar
   * @returns {boolean} True si el usuario tiene el permiso especificado
   */
  const hasPermission = (_permission: string): boolean => {
    // TODO: Implement permissions system when User interface includes permissions
    return false
  }
  
  /**
   * Funci√≥n para verificar si el usuario puede acceder a una ruta
   * 
   * @param {string} routeName - Nombre de la ruta
   * @param {string[]} requiredRoles - Roles requeridos para acceder
   * @param {string[]} requiredPermissions - Permisos requeridos para acceder
   * @returns {boolean} True si el usuario puede acceder
   */
  const canAccess = (_routeName: string, requiredRoles?: string[], requiredPermissions?: string[]): boolean => {
    // Si no est√° autenticado, no puede acceder a rutas protegidas
    if (!isAuthenticated.value) {
      return false
    }
    
    // Verificar roles requeridos
    if (requiredRoles && requiredRoles.length > 0) {
      const hasRequiredRole = requiredRoles.some(role => hasRole(role))
      if (!hasRequiredRole) {
        return false
      }
    }
    
    // Verificar permisos requeridos
    if (requiredPermissions && requiredPermissions.length > 0) {
      const hasRequiredPermission = requiredPermissions.some(permission => hasPermission(permission))
      if (!hasRequiredPermission) {
        return false
      }
    }
    
    return true
  }
  
  /**
   * Funci√≥n para obtener la ruta de redirecci√≥n seg√∫n el rol del usuario
   * 
   * @param {string} role - Rol del usuario
   * @returns {string} Ruta de redirecci√≥n
   */
  const getRedirectPath = (role: string): string => {
    switch (role) {
      case 'admin':
        return '/admin/dashboard'
      case 'moderator':
        return '/moderator/dashboard'
      case 'user':
      default:
        return '/feed'
    }
  }
  
  /**
   * Funci√≥n para refrescar el token de autenticaci√≥n
   * 
   * @returns {Promise<boolean>} True si el refresh fue exitoso
   */
  const refreshToken = async (): Promise<boolean> => {
    try {
      const response = await authService.refreshToken()
      
      if (response.token && response.user) {
        authStore.saveAuth(response.token, response.user)
        return true
      }
      
      return false
      
    } catch (err) {
      console.error('Error al refrescar token:', err)
      // Si falla el refresh, cerrar sesi√≥n
      await logout(false)
      return false
    }
  }
  
  /**
   * Funci√≥n para verificar la validez del token actual
   * 
   * @returns {Promise<boolean>} True si el token es v√°lido
   */
  const verifyToken = async (): Promise<boolean> => {
    try {
      if (!token.value) {
        return false
      }
      
      const response = await authService.verifyToken()
      return response.valid
      
    } catch (err) {
      console.error('Error al verificar token:', err)
      return false
    }
  }
  
  /**
   * Funci√≥n para actualizar el perfil del usuario
   * 
   * @param {Partial<User>} userData - Datos a actualizar
   * @returns {Promise<boolean>} True si la actualizaci√≥n fue exitosa
   */
  const updateProfile = async (userData: Partial<User>): Promise<boolean> => {
    try {
      clearMessages()
      isLoading.value = true
      
      await authService.updateProfile(userData)
      
      // Actualizar el usuario en el store
      await authStore.updateProfile(userData)
      
      successMessage.value = 'Perfil actualizado exitosamente.'
      return true
      
    } catch (err) {
      handleAuthError(err)
      return false
      
    } finally {
      isLoading.value = false
    }
  }
  
  /**
   * Funci√≥n para cambiar la contrase√±a del usuario
   * 
   * @param {string} currentPassword - Contrase√±a actual
   * @param {string} newPassword - Nueva contrase√±a
   * @param {string} confirmPassword - Confirmaci√≥n de nueva contrase√±a
   * @returns {Promise<boolean>} True si el cambio fue exitoso
   */
  const changePassword = async (currentPassword: string, newPassword: string, confirmPassword: string): Promise<boolean> => {
    try {
      clearMessages()
      isLoading.value = true
      
      // Validaciones
      if (!currentPassword || !newPassword || !confirmPassword) {
        error.value = 'Todos los campos son requeridos.'
        return false
      }
      
      if (newPassword !== confirmPassword) {
        error.value = 'Las contrase√±as no coinciden.'
        return false
      }
      
      if (newPassword.length < 8) {
        error.value = 'La nueva contrase√±a debe tener al menos 8 caracteres.'
        return false
      }
      
      await authService.updatePassword({
        currentPassword,
        newPassword,
        confirmPassword
      })
      
      successMessage.value = 'Contrase√±a cambiada exitosamente.'
      return true
      
    } catch (err) {
      handleAuthError(err)
      return false
      
    } finally {
      isLoading.value = false
    }
  }
  
  // Retornar la interfaz p√∫blica del composable
  return {
    // Estados reactivos
    user,
    isAuthenticated,
    token,
    userRole,
    userPermissions,
    isLoading,
    error,
    successMessage,
    
    // M√©todos de autenticaci√≥n
    login,
    register,
    logout,
    refreshToken,
    verifyToken,
    
    // M√©todos de autorizaci√≥n
    hasRole,
    hasPermission,
    canAccess,
    
    // M√©todos de gesti√≥n de perfil
    updateProfile,
    changePassword,
    
    // M√©todos utilitarios
    clearMessages,
    getRedirectPath,
    checkAuth: authStore.checkAuth
  }
}