/**
 * @file index.ts
 * @description √çndice del m√≥dulo de gesti√≥n de art√≠culos de Ecommunitas
 * @module Features/Items
 * @version 1.0.0
 * @author Equipo de Desarrollo Ecommunitas
 * @created 2024
 * 
 * Este archivo centraliza todas las exportaciones relacionadas con la funcionalidad
 * de gesti√≥n de art√≠culos/items del marketplace. Proporciona un punto √∫nico de
 * acceso a todos los componentes, servicios, stores y tipos relacionados con
 * la publicaci√≥n, b√∫squeda y gesti√≥n de art√≠culos.
 * 
 * ARQUITECTURA DEL M√ìDULO:
 * ========================
 * 
 * üè™ STORES (Estado Global):
 * - useItemsStore: Store principal de Pinia para gesti√≥n de estado de art√≠culos
 * - Cache inteligente de art√≠culos con invalidaci√≥n autom√°tica
 * - Estado de b√∫squeda, filtros y paginaci√≥n
 * - Gesti√≥n de art√≠culo seleccionado y favoritos
 * - Optimizaci√≥n de rendimiento con lazy loading
 * 
 * üîß SERVICIOS (API):
 * - itemService: Cliente HTTP para operaciones CRUD de art√≠culos
 * - B√∫squeda avanzada con filtros geogr√°ficos y categor√≠as
 * - Carga de im√°genes con compresi√≥n autom√°tica
 * - Moderaci√≥n y reportes de contenido
 * - Estad√≠sticas y analytics de art√≠culos
 * 
 * üß© COMPONENTES (UI):
 * - ItemGrid: Grilla responsiva de art√≠culos
 * - ItemCard: Tarjeta individual de art√≠culo
 * - ItemForm: Formulario de creaci√≥n/edici√≥n
 * - ItemDetails: Vista detallada de art√≠culo
 * - SearchFilters: Filtros avanzados de b√∫squeda
 * - ImageGallery: Galer√≠a de im√°genes con zoom
 * 
 * üìÑ VISTAS (P√°ginas):
 * - Lista de art√≠culos con b√∫squeda y filtros
 * - Detalle de art√≠culo individual
 * - Formulario de publicaci√≥n/edici√≥n
 * - Mis art√≠culos publicados
 * - Art√≠culos favoritos
 * 
 * üìä TIPOS (TypeScript):
 * - Item: Interfaz principal de art√≠culo
 * - ItemsResponse: Respuesta paginada de la API
 * - CreateItemData: Datos para crear art√≠culo
 * - UpdateItemData: Datos para actualizar art√≠culo
 * - SearchParams: Par√°metros de b√∫squeda avanzada
 * 
 * FUNCIONALIDADES PRINCIPALES:
 * ============================
 * 
 * üìù GESTI√ìN DE ART√çCULOS:
 * - Publicaci√≥n de nuevos art√≠culos con im√°genes
 * - Edici√≥n de art√≠culos existentes
 * - Eliminaci√≥n con confirmaci√≥n
 * - Duplicaci√≥n de art√≠culos similares
 * - Gesti√≥n de estado (activo, pausado, vendido)
 * 
 * üîç B√öSQUEDA Y FILTRADO:
 * - B√∫squeda por texto libre
 * - Filtros por categor√≠a, condici√≥n, ubicaci√≥n
 * - B√∫squeda geogr√°fica por proximidad
 * - Ordenamiento por relevancia, fecha, precio
 * - Filtros de rango de precios
 * 
 * üñºÔ∏è GESTI√ìN DE IM√ÅGENES:
 * - Carga m√∫ltiple con drag & drop
 * - Compresi√≥n autom√°tica para optimizar tama√±o
 * - Reordenamiento de im√°genes
 * - Previsualizaci√≥n antes de publicar
 * - Eliminaci√≥n individual de im√°genes
 * 
 * üìç FUNCIONALIDADES GEOGR√ÅFICAS:
 * - Ubicaci√≥n autom√°tica por GPS
 * - B√∫squeda por radio de distancia
 * - Integraci√≥n con mapas interactivos
 * - Sugerencias de ubicaci√≥n
 * 
 * üí¨ INTERACCI√ìN SOCIAL:
 * - Sistema de favoritos
 * - Compartir art√≠culos
 * - Reportar contenido inapropiado
 * - Contactar al vendedor
 * 
 * VENTAJAS DE LA ARQUITECTURA:
 * ============================
 * 
 * ‚úÖ **Importaciones Limpias**: 
 *    `import { useItemsStore, itemService } from '@/features/items'`
 * 
 * ‚úÖ **Cache Inteligente**: 
 *    Optimizaci√≥n autom√°tica de rendimiento con cache
 * 
 * ‚úÖ **B√∫squeda Avanzada**: 
 *    Filtros potentes y b√∫squeda geogr√°fica
 * 
 * ‚úÖ **Gesti√≥n de Estado**: 
 *    Estado reactivo y persistente
 * 
 * ‚úÖ **Componentes Reutilizables**: 
 *    UI consistente en toda la aplicaci√≥n
 * 
 * ‚úÖ **Tipado Fuerte**: 
 *    TypeScript para mayor seguridad
 * 
 * @example
 * ```typescript
 * // Uso b√°sico del m√≥dulo de art√≠culos
 * import { 
 *   useItemsStore, 
 *   itemService,
 *   type Item,
 *   type SearchParams 
 * } from '@/features/items'
 * 
 * // En un componente Vue
 * const itemsStore = useItemsStore()
 * 
 * // Buscar art√≠culos
 * const searchParams: SearchParams = {
 *   query: 'laptop',
 *   category: 'electronics',
 *   location: 'Madrid, Espa√±a',
 *   distance: 10
 * }
 * 
 * await itemsStore.searchItems(searchParams)
 * 
 * // Crear nuevo art√≠culo
 * const newItem = await itemService.createItem({
 *   title: 'Laptop Gaming',
 *   description: 'Excelente estado',
 *   category: 'electronics',
 *   condition: 'like_new',
 *   location: 'Madrid, Espa√±a'
 * })
 * ```
 */

// Services
export { default as itemService } from './services/itemService'
export * from './services/itemService'

// Stores
export { useItemsStore } from './stores/itemsStore'

// Components
export * from './components'

// Views
export * from './views'

// Types (re-export for convenience)
export type {
  Item,
  ItemsResponse,
  CreateItemData,
  UpdateItemData,
  SearchParams
} from './services/itemService'