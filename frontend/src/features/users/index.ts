/**
 * @file index.ts
 * @description √çndice del m√≥dulo de gesti√≥n de usuarios de Ecommunitas
 * @module Features/Users
 * @version 1.0.0
 * @author Equipo de Desarrollo Ecommunitas
 * @created 2024
 * 
 * Este archivo centraliza todas las exportaciones relacionadas con la funcionalidad
 * de gesti√≥n de usuarios del sistema. Proporciona un punto √∫nico de acceso a todos
 * los componentes, servicios, stores, composables, utilidades y tipos relacionados
 * con la administraci√≥n, perfiles y interacciones de usuarios.
 * 
 * ARQUITECTURA DEL M√ìDULO:
 * ========================
 * 
 * üè™ STORES (Estado Global):
 * - useUsersStore: Store principal de Pinia para gesti√≥n de estado de usuarios
 * - Cache inteligente de perfiles con invalidaci√≥n autom√°tica
 * - Estado de b√∫squeda, filtros y paginaci√≥n de usuarios
 * - Gesti√≥n de usuario actual y preferencias
 * - Optimizaci√≥n de rendimiento con lazy loading
 * 
 * üîß SERVICIOS (API):
 * - userService: Cliente HTTP para operaciones CRUD de usuarios
 * - Gesti√≥n de perfiles y preferencias
 * - Autenticaci√≥n y autorizaci√≥n
 * - B√∫squeda avanzada de usuarios
 * - Estad√≠sticas y analytics de usuarios
 * 
 * üß© COMPONENTES (UI):
 * - UserCard: Tarjeta de perfil de usuario
 * - UserList: Lista de usuarios con filtros
 * - UserProfile: Vista completa de perfil
 * - UserForm: Formulario de edici√≥n de perfil
 * - UserAvatar: Avatar con estados online/offline
 * - UserSearch: B√∫squeda avanzada de usuarios
 * 
 * üìÑ VISTAS (P√°ginas):
 * - Lista de usuarios con b√∫squeda y filtros
 * - Perfil de usuario individual
 * - Edici√≥n de perfil personal
 * - Configuraci√≥n de preferencias
 * - Panel de administraci√≥n de usuarios
 * 
 * üéØ COMPOSABLES (L√≥gica Reutilizable):
 * - useUsers: Gesti√≥n general de usuarios
 * - useCurrentUser: Usuario actual y sesi√≥n
 * - useUserSearch: B√∫squeda avanzada
 * - useUserPermissions: Gesti√≥n de permisos
 * - useUserList: Lista paginada de usuarios
 * 
 * üõ†Ô∏è UTILIDADES (Helpers):
 * - Formateo de nombres y avatares
 * - Gesti√≥n de roles y permisos
 * - Validaci√≥n de datos de usuario
 * - Utilidades de comparaci√≥n y ordenamiento
 * - Filtrado y b√∫squeda
 * - Gesti√≥n de preferencias
 * - Estad√≠sticas y m√©tricas
 * 
 * üìä TIPOS (TypeScript):
 * - User: Interfaz principal de usuario
 * - UserPreferences: Configuraci√≥n personal
 * - UpdateUserData: Datos para actualizar perfil
 * - UsersResponse: Respuesta paginada de usuarios
 * - UserFilters: Filtros de b√∫squeda
 * - UsersState: Estado del store
 * 
 * FUNCIONALIDADES PRINCIPALES:
 * ============================
 * 
 * üë§ GESTI√ìN DE PERFILES:
 * - Visualizaci√≥n de perfiles completos
 * - Edici√≥n de informaci√≥n personal
 * - Gesti√≥n de avatar y fotos
 * - Configuraci√≥n de preferencias
 * - Historial de actividad
 * 
 * üîç B√öSQUEDA Y FILTRADO:
 * - B√∫squeda por nombre, email, ubicaci√≥n
 * - Filtros por rol, estado, fecha de registro
 * - B√∫squeda geogr√°fica por proximidad
 * - Ordenamiento por m√∫ltiples criterios
 * - Filtros avanzados personalizables
 * 
 * üîê ROLES Y PERMISOS:
 * - Sistema de roles jer√°rquico
 * - Gesti√≥n granular de permisos
 * - Validaci√≥n de autorizaci√≥n
 * - Moderaci√≥n y administraci√≥n
 * - Control de acceso a funcionalidades
 * 
 * üìä ESTAD√çSTICAS Y M√âTRICAS:
 * - Tiempo de registro y √∫ltima actividad
 * - Estad√≠sticas de uso y participaci√≥n
 * - M√©tricas de interacci√≥n social
 * - An√°lisis de comportamiento
 * - Reportes de actividad
 * 
 * üí¨ INTERACCI√ìN SOCIAL:
 * - Sistema de seguimiento entre usuarios
 * - Mensajer√≠a directa
 * - Valoraciones y reputaci√≥n
 * - Reportes de usuarios
 * - Bloqueo y moderaci√≥n
 * 
 * üé® PERSONALIZACI√ìN:
 * - Temas y preferencias visuales
 * - Configuraci√≥n de notificaciones
 * - Preferencias de privacidad
 * - Configuraci√≥n de ubicaci√≥n
 * - Idioma y localizaci√≥n
 * 
 * VENTAJAS DE LA ARQUITECTURA:
 * ============================
 * 
 * ‚úÖ **Importaciones Limpias**: 
 *    `import { useUsersStore, userService } from '@/features/users'`
 * 
 * ‚úÖ **Gesti√≥n Completa**: 
 *    Todas las utilidades de usuario en un solo lugar
 * 
 * ‚úÖ **Roles y Permisos**: 
 *    Sistema robusto de autorizaci√≥n
 * 
 * ‚úÖ **Cache Inteligente**: 
 *    Optimizaci√≥n autom√°tica de rendimiento
 * 
 * ‚úÖ **B√∫squeda Avanzada**: 
 *    Filtros potentes y b√∫squeda flexible
 * 
 * ‚úÖ **Tipado Fuerte**: 
 *    TypeScript para mayor seguridad
 * 
 * ‚úÖ **Composables Reutilizables**: 
 *    L√≥gica compartida entre componentes
 * 
 * ‚úÖ **Utilidades Extensas**: 
 *    Helpers para todas las operaciones comunes
 * 
 * @example
 * ```typescript
 * // Uso b√°sico del m√≥dulo de usuarios
 * import { 
 *   useUsersStore, 
 *   userService,
 *   useCurrentUser,
 *   formatUserDisplayName,
 *   isUserAdmin,
 *   type User 
 * } from '@/features/users'
 * 
 * // En un componente Vue
 * const usersStore = useUsersStore()
 * const { currentUser, isLoggedIn } = useCurrentUser()
 * 
 * // Buscar usuarios
 * await usersStore.searchUsers({
 *   query: 'Juan',
 *   role: 'user',
 *   location: 'Madrid'
 * })
 * 
 * // Verificar permisos
 * if (isUserAdmin(currentUser.value)) {
 *   // Mostrar panel de administraci√≥n
 * }
 * 
 * // Formatear nombre para mostrar
 * const displayName = formatUserDisplayName(user)
 * ```
 */

// Services
export { userService, default as defaultUserService } from './services/userService'

// Components
export * from './components'

// Views
export * from './views'

// Stores
export { useUsersStore } from './stores/usersStore'

// Composables
export {
  useUsers,
  useCurrentUser,
  useUserSearch,
  useUserPermissions,
  useUserList
} from './composables/useUsers'

// Utils
export {
  // Display utilities
  formatUserDisplayName,
  getUserInitials,
  getUserAvatarUrl,
  
  // Role utilities
  getUserRoleLabel,
  getUserRoleColor,
  isUserRole,
  hasUserRole,
  isUserAdmin,
  isUserModerator,
  canUserModerate,
  
  // Status utilities
  getUserStatusLabel,
  getUserStatusColor,
  isUserActive,
  isUserOnline,
  
  // Validation utilities
  isValidUserName,
  isValidUserEmail,
  isValidUserPhone,
  validateUserData,
  
  // Comparison utilities
  isSameUser,
  isCurrentUser,
  
  // Sorting utilities
  sortUsersByName,
  sortUsersByRole,
  sortUsersByDate,
  
  // Filtering utilities
  filterUsersByRole,
  filterUsersByStatus,
  filterUsersBySearch,
  
  // Preferences utilities
  getDefaultUserPreferences,
  mergeUserPreferences,
  
  // Statistics utilities
  calculateUserAge,
  formatUserJoinDate,
  formatUserLastSeen,
  
  // Helper utilities
  sanitizeUserInput,
  truncateText,
  getUserDisplayInfo
} from './utils/userUtils'

// Types
export type {
  User,
  UserPreferences,
  UpdateUserData,
  UserItem,
  UserTrade,
  UsersResponse,
  UserResponse,
  UserItemsResponse,
  UserTradesResponse
} from './services/userService'

export type {
  UserFilters,
  UserPagination,
  UserCache,
  UsersState
} from './stores/usersStore'