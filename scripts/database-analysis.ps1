# Script para analizar la estructura de la base de datos MongoDB y compararla con los modelos
# Autor: Asistente AI
# Fecha: Diciembre 2024

Write-Host "=== AN√ÅLISIS DE BASE DE DATOS ECOMMUNITAS ===" -ForegroundColor Green
Write-Host "Generando reporte de estructura de base de datos..." -ForegroundColor Yellow

# Configuraci√≥n
$projectPath = "C:\Users\danie\OneDrive\Desktop\Proyecto FG\Ecommunitas"
$outputFile = "$projectPath\database-structure-report.md"
$modelsPath = "$projectPath\backend\src\models"
$entitiesDoc = "$projectPath\ENTIDADES_BASE_DATOS.md"

# Funci√≥n para obtener informaci√≥n de MongoDB
function Get-MongoDBInfo {
    Write-Host "Intentando conectar a MongoDB..." -ForegroundColor Cyan
    
    try {
        # Verificar si mongo CLI est√° disponible
        $mongoCheck = Get-Command mongo -ErrorAction SilentlyContinue
        if (-not $mongoCheck) {
            Write-Host "MongoDB CLI no encontrado" -ForegroundColor Yellow
            return $null
        }
        
        # Script simple para MongoDB
        $mongoScript = 'db.adminCommand("listCollections").cursor.firstBatch.forEach(function(c) { print("Coleccion: " + c.name); var stats = db.getCollection(c.name).stats(); print("Documentos: " + stats.count); print("---"); });'
        
        # Ejecutar comando MongoDB
        $result = & mongo --quiet --eval $mongoScript 2>&1
        if ($LASTEXITCODE -eq 0) {
            return $result -join "`n"
        } else {
            return $null
        }
    }
    catch {
        Write-Host "Error al conectar con MongoDB: $_" -ForegroundColor Red
        return $null
    }
}

# Funci√≥n para analizar modelos de Mongoose
function Analyze-MongooseModels {
    Write-Host "Analizando modelos de Mongoose..." -ForegroundColor Cyan
    
    $models = @{}
    $modelFiles = Get-ChildItem -Path $modelsPath -Filter "*.ts" -ErrorAction SilentlyContinue
    
    if (-not $modelFiles) {
        Write-Host "No se encontraron archivos de modelo en: $modelsPath" -ForegroundColor Yellow
        return $models
    }
    
    foreach ($file in $modelFiles) {
        try {
            $content = Get-Content -Path $file.FullName -Raw -ErrorAction Stop
            $modelName = $file.BaseName
            
            $models[$modelName] = @{
                'File' = $file.Name
                'Path' = $file.FullName
                'Size' = $file.Length
                'LastModified' = $file.LastWriteTime
                'HasSchema' = $content -match 'Schema'
                'HasInterface' = $content -match 'interface'
                'HasExport' = $content -match 'export'
            }
            
            # Contar campos aproximados
            $fieldCount = ([regex]::Matches($content, '\w+\s*:\s*\{')).Count
            $models[$modelName]['EstimatedFields'] = $fieldCount
            
            # Contar √≠ndices
            $indexCount = ([regex]::Matches($content, 'index\(')).Count
            $models[$modelName]['EstimatedIndexes'] = $indexCount
            
        }
        catch {
            Write-Host "Error al procesar archivo $($file.Name): $_" -ForegroundColor Red
        }
    }
    
    return $models
}

# Funci√≥n para generar reporte
function Generate-Report {
    param(
        [hashtable]$models,
        [string]$mongoInfo
    )
    
    Write-Host "Generando reporte..." -ForegroundColor Cyan
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    $report = @"
# üìä REPORTE DE AN√ÅLISIS DE BASE DE DATOS ECOMMUNITAS

**Fecha de generaci√≥n:** $timestamp
**Proyecto:** Ecommunitas
**Base de datos:** MongoDB
**ORM:** Mongoose

---

## üîç RESUMEN EJECUTIVO

Este reporte compara la estructura real de la base de datos MongoDB con los modelos definidos en la aplicaci√≥n Ecommunitas.

**Modelos encontrados:** $($models.Keys.Count)
**Ruta de modelos:** ``$modelsPath``

---

## üìã MODELOS DE MONGOOSE ANALIZADOS

"@

    if ($models.Keys.Count -gt 0) {
        foreach ($modelName in $models.Keys) {
            $model = $models[$modelName]
            $report += @"

### üìÑ MODELO: $modelName

- **Archivo:** ``$($model.File)``
- **Tama√±o:** $($model.Size) bytes
- **√öltima modificaci√≥n:** $($model.LastModified)
- **Tiene Schema:** $(if($model.HasSchema) {'‚úÖ S√≠'} else {'‚ùå No'})
- **Tiene Interface:** $(if($model.HasInterface) {'‚úÖ S√≠'} else {'‚ùå No'})
- **Tiene Export:** $(if($model.HasExport) {'‚úÖ S√≠'} else {'‚ùå No'})
- **Campos estimados:** $($model.EstimatedFields)
- **√çndices estimados:** $($model.EstimatedIndexes)

"@
        }
    } else {
        $report += "`n‚ùå **No se encontraron modelos de Mongoose**`n`n"
    }

    # Agregar informaci√≥n de MongoDB si est√° disponible
    if ($mongoInfo) {
        $report += @"

---

## üóÑÔ∏è ESTRUCTURA REAL DE LA BASE DE DATOS

```
$mongoInfo
```

"@
    } else {
        $report += @"

---

## ‚ö†Ô∏è INFORMACI√ìN DE BASE DE DATOS NO DISPONIBLE

No se pudo conectar a MongoDB para obtener la estructura real de la base de datos.

**Posibles causas:**
- MongoDB no est√° ejecut√°ndose
- El cliente mongo CLI no est√° instalado o no est√° en PATH
- Problemas de conexi√≥n a la base de datos
- La base de datos no existe o est√° vac√≠a

**Para obtener informaci√≥n manual:**

1. Aseg√∫rate de que MongoDB est√© ejecut√°ndose:
   ```bash
   # En Windows (si MongoDB est√° como servicio)
   net start MongoDB
   
   # O ejecutar mongod manualmente
   mongod --dbpath C:\data\db
   ```

2. Conecta a MongoDB:
   ```bash
   mongo
   ```

3. Lista las bases de datos:
   ```javascript
   show dbs
   ```

4. Usa la base de datos del proyecto:
   ```javascript
   use ecommunitas  // o el nombre de tu base de datos
   ```

5. Lista las colecciones:
   ```javascript
   show collections
   ```

6. Para cada colecci√≥n, obt√©n informaci√≥n:
   ```javascript
   db.users.findOne()  // Ejemplo para colecci√≥n users
   db.users.getIndexes()
   db.users.stats()
   ```

"@
    }

    # Agregar an√°lisis de discrepancias
    $report += @"

---

## üîç AN√ÅLISIS DE DISCREPANCIAS

### Comparaci√≥n con ENTIDADES_BASE_DATOS.md

"@

    if (Test-Path $entitiesDoc) {
        try {
            $entitiesContent = Get-Content -Path $entitiesDoc -Raw -ErrorAction Stop
            $report += "‚úÖ **Documento de entidades encontrado:** ``ENTIDADES_BASE_DATOS.md```n`n"
            
            # Analizar discrepancias b√°sicas
            $report += "#### Modelos encontrados en c√≥digo vs documentaci√≥n:`n`n"
            
            foreach ($modelName in $models.Keys) {
                $modelNameUpper = $modelName.ToUpper()
                if ($entitiesContent -match $modelName -or $entitiesContent -match $modelNameUpper) {
                    $report += "- ‚úÖ **$modelName:** Documentado`n"
                } else {
                    $report += "- ‚ö†Ô∏è **$modelName:** No encontrado en documentaci√≥n`n"
                }
            }
            
            # Verificar entidades mencionadas en documentaci√≥n
            $documentedEntities = @('USER', 'ITEM', 'MESSAGE')
            $report += "`n#### Entidades documentadas vs modelos en c√≥digo:`n`n"
            
            foreach ($entity in $documentedEntities) {
                $found = $false
                foreach ($modelName in $models.Keys) {
                    if ($modelName.ToUpper() -eq $entity -or $modelName.ToUpper() -eq ($entity.Substring(0,1) + $entity.Substring(1).ToLower())) {
                        $found = $true
                        break
                    }
                }
                
                if ($found) {
                    $report += "- ‚úÖ **$entity:** Modelo implementado`n"
                } else {
                    $report += "- ‚ùå **$entity:** Modelo no encontrado`n"
                }
            }
        }
        catch {
            $report += "‚ùå **Error al leer documento de entidades:** $_`n`n"
        }
    } else {
        $report += "‚ùå **Documento de entidades no encontrado:** ``ENTIDADES_BASE_DATOS.md```n`n"
    }

    $report += @"

---

## üìù RECOMENDACIONES

### Para mantener la documentaci√≥n actualizada:

1. **Sincronizaci√≥n regular:** Ejecuta este script despu√©s de cambios en los modelos
2. **Validaci√≥n de esquemas:** Compara campos documentados vs implementados
3. **√çndices:** Verifica que los √≠ndices documentados coincidan con los implementados
4. **Validaciones:** Aseg√∫rate de que las validaciones est√©n documentadas

### Pr√≥ximos pasos:

1. ‚úÖ Revisar discrepancias encontradas
2. ‚úÖ Actualizar ``ENTIDADES_BASE_DATOS.md`` si es necesario
3. ‚úÖ Verificar que la base de datos real coincida con los modelos
4. ‚úÖ Documentar cualquier cambio en los esquemas

### Para conectar a MongoDB:

1. **Instalar MongoDB:** Si no est√° instalado, descarga desde https://www.mongodb.com/try/download/community
2. **Iniciar servicio:** ``net start MongoDB`` (Windows) o ``sudo systemctl start mongod`` (Linux)
3. **Verificar conexi√≥n:** ``mongo --eval "db.adminCommand('ismaster')"``

---

## üõ†Ô∏è COMANDOS √öTILES

### Para MongoDB:
```javascript
// Listar todas las colecciones
show collections

// Obtener esquema de una colecci√≥n
db.users.findOne()

// Obtener √≠ndices
db.users.getIndexes()

// Estad√≠sticas de colecci√≥n
db.users.stats()

// Contar documentos
db.users.countDocuments()
```

### Para Mongoose (en Node.js):
```javascript
// Obtener informaci√≥n del esquema
const User = require('./models/User');
console.log(User.schema.paths);
console.log(User.schema.indexes());
```

### Para este script:
```powershell
# Ejecutar an√°lisis
.\scripts\database-analysis.ps1

# Ver solo modelos sin conectar a MongoDB
.\scripts\database-analysis.ps1 -SkipMongoDB
```

---

*Reporte generado autom√°ticamente por script de an√°lisis de base de datos*
*Proyecto: Ecommunitas | Fecha: $timestamp*
"@

    return $report
}

# Ejecutar an√°lisis principal
try {
    Write-Host "Iniciando an√°lisis..." -ForegroundColor Green
    
    # Verificar que existe el directorio de modelos
    if (-not (Test-Path $modelsPath)) {
        Write-Host "‚ùå No se encontr√≥ el directorio de modelos: $modelsPath" -ForegroundColor Red
        Write-Host "Verifica que el proyecto est√© en la ruta correcta" -ForegroundColor Yellow
        exit 1
    }
    
    # Analizar modelos
    Write-Host "üìÅ Analizando modelos en: $modelsPath" -ForegroundColor Cyan
    $models = Analyze-MongooseModels
    Write-Host "‚úÖ Modelos analizados: $($models.Keys.Count)" -ForegroundColor Green
    
    if ($models.Keys.Count -gt 0) {
        Write-Host "üìã Modelos encontrados: $($models.Keys -join ', ')" -ForegroundColor White
    }
    
    # Obtener informaci√≥n de MongoDB
    Write-Host "üîå Intentando conectar a MongoDB..." -ForegroundColor Yellow
    $mongoInfo = Get-MongoDBInfo
    
    if ($mongoInfo) {
        Write-Host "‚úÖ Informaci√≥n de MongoDB obtenida exitosamente" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è No se pudo obtener informaci√≥n de MongoDB (continuando sin ella)" -ForegroundColor Yellow
    }
    
    # Generar reporte
    Write-Host "üìÑ Generando reporte..." -ForegroundColor Cyan
    $report = Generate-Report -models $models -mongoInfo $mongoInfo
    
    # Guardar reporte
    try {
        $report | Out-File -FilePath $outputFile -Encoding UTF8 -ErrorAction Stop
        Write-Host "‚úÖ Reporte guardado exitosamente" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Error al guardar reporte: $_" -ForegroundColor Red
        Write-Host "Intentando guardar en ubicaci√≥n alternativa..." -ForegroundColor Yellow
        $alternativeFile = "$env:TEMP\database-structure-report.md"
        $report | Out-File -FilePath $alternativeFile -Encoding UTF8
        $outputFile = $alternativeFile
        Write-Host "‚úÖ Reporte guardado en: $outputFile" -ForegroundColor Green
    }
    
    Write-Host "" -ForegroundColor Green
    Write-Host "üéâ AN√ÅLISIS COMPLETADO EXITOSAMENTE" -ForegroundColor Green
    Write-Host "üìÑ Reporte guardado en: $outputFile" -ForegroundColor Cyan
    Write-Host "" -ForegroundColor Green
    
    # Mostrar resumen
    Write-Host "üìä RESUMEN DEL AN√ÅLISIS:" -ForegroundColor Yellow
    Write-Host "- Modelos analizados: $($models.Keys.Count)" -ForegroundColor White
    if ($models.Keys.Count -gt 0) {
        Write-Host "- Archivos de modelo: $($models.Keys -join ', ')" -ForegroundColor White
    }
    
    if ($mongoInfo) {
        Write-Host "- Conexi√≥n a MongoDB: ‚úÖ Exitosa" -ForegroundColor Green
    } else {
        Write-Host "- Conexi√≥n a MongoDB: ‚ö†Ô∏è No disponible" -ForegroundColor Yellow
    }
    
    Write-Host "- Documento de entidades: $(if (Test-Path $entitiesDoc) {'‚úÖ Encontrado'} else {'‚ùå No encontrado'})" -ForegroundColor $(if (Test-Path $entitiesDoc) {'Green'} else {'Red'})
    
    Write-Host "" -ForegroundColor Green
    
    # Preguntar si abrir el reporte
    Write-Host "¬øDeseas abrir el reporte generado? (s/n): " -ForegroundColor Cyan -NoNewline
    $openFile = Read-Host
    if ($openFile -eq 's' -or $openFile -eq 'S' -or $openFile -eq 'y' -or $openFile -eq 'Y') {
        try {
            Start-Process $outputFile
            Write-Host "üìñ Abriendo reporte..." -ForegroundColor Green
        }
        catch {
            Write-Host "‚ùå No se pudo abrir el reporte autom√°ticamente" -ForegroundColor Red
            Write-Host "Puedes abrirlo manualmente desde: $outputFile" -ForegroundColor Yellow
        }
    }
    
}
catch {
    Write-Host "" -ForegroundColor Red
    Write-Host "‚ùå ERROR CR√çTICO: $_" -ForegroundColor Red
    Write-Host "" -ForegroundColor Red
    Write-Host "üîß VERIFICACIONES:" -ForegroundColor Yellow
    Write-Host "1. ‚úÖ El proyecto est√© en la ruta correcta: $projectPath" -ForegroundColor White
    Write-Host "2. ‚úÖ Los modelos existan en: $modelsPath" -ForegroundColor White
    Write-Host "3. ‚ö†Ô∏è MongoDB est√© ejecut√°ndose (opcional para an√°lisis b√°sico)" -ForegroundColor White
    Write-Host "4. ‚úÖ Permisos de escritura en el directorio del proyecto" -ForegroundColor White
    Write-Host "" -ForegroundColor Red
}

Write-Host "" -ForegroundColor Green
Write-Host "Presiona cualquier tecla para continuar..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")